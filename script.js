// ===== MODIFICATIONS POUR R√âSERVATION R√âELLE =====
// Ajouter ces modifications dans script.js

// Modifier la fonction confirmBooking pour g√©rer les r√©servations r√©elles
async function confirmBooking() {
    console.log('Confirmation finale - R√©servation R√âELLE via Duffel + Email');
    
    addMessage('üéØ Finalisation de votre r√©servation R√âELLE...', false);
    
    // Ajouter un indicateur de progression
    const progressMessage = `
        <div id="booking-progress" style="background: #f0f9ff; border-radius: 12px; padding: 15px; margin: 10px 0;">
            <div style="font-weight: 600; margin-bottom: 10px;">üìã √âtapes de r√©servation :</div>
            <div id="step-1" style="margin: 5px 0; color: #3b82f6;">‚è≥ 1. Cr√©ation de l'ordre Duffel...</div>
            <div id="step-2" style="margin: 5px 0; color: #6b7280;">‚è∏Ô∏è 2. Envoi email de confirmation</div>
            <div id="step-3" style="margin: 5px 0; color: #6b7280;">‚è∏Ô∏è 3. Finalisation</div>
        </div>
    `;
    
    addMessage(progressMessage, false, true);

    try {
        const passenger = safeGetPassengerData(bookingState.passengers?.[0]);
        const duffelOffer = extractDuffelData(bookingState.selectedFlight);
        
        // Appel backend pour r√©servation R√âELLE
        const response = await fetch(API_ENDPOINTS.bookingConfirm, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sessionId: bookingState.sessionId,
                
                // Donn√©es vol avec Duffel natif
                flightId: duffelOffer.id || bookingState.selectedFlight?.id,
                selectedFlight: {
                    ...bookingState.selectedFlight,
                    duffelData: duffelOffer
                },
                
                // Donn√©es passager avec validation renforc√©e
                passengers: [{
                    firstName: passenger.firstName,
                    lastName: passenger.lastName,
                    name: {
                        firstName: passenger.firstName,
                        lastName: passenger.lastName
                    },
                    dateOfBirth: passenger.dateOfBirth,
                    gender: passenger.gender,
                    passportNumber: passenger.passportNumber || '',
                    
                    // Donn√©es suppl√©mentaires pour Duffel
                    given_name: passenger.firstName,
                    family_name: passenger.lastName,
                    born_on: passenger.dateOfBirth
                }],
                
                // Contact
                contact: bookingState.contact,
                
                // M√©tadonn√©es de r√©servation R√âELLE
                payment: {
                    method: 'stripe_integration',
                    status: 'pending'
                },
                bookingType: 'real_duffel_order',
                metadata: {
                    bookingSource: 'web_real_booking',
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent,
                    realBooking: true
                }
            })
        });

        // Mettre √† jour le premier indicateur
        updateProgressStep('step-1', '‚úÖ 1. Ordre Duffel cr√©√©');
        updateProgressStep('step-2', '‚è≥ 2. Envoi email de confirmation...');

        const data = await response.json();
        console.log('R√©ponse r√©servation R√âELLE:', data);

        if (data.success && data.duffelOrder) {
            // R√©servation Duffel r√©ussie
            updateProgressStep('step-2', '‚úÖ 2. Email de confirmation envoy√©');
            updateProgressStep('step-3', '‚úÖ 3. R√©servation finalis√©e');
            
            bookingState.currentStep = 'completed';
            
            // Afficher le r√©sultat selon le statut
            if (data.bookingStatus === 'confirmed') {
                showRealBookingSuccess(data);
            } else if (data.bookingStatus === 'pending_payment') {
                showPaymentRequired(data);
            } else {
                showBookingPartialSuccess(data);
            }
            
        } else if (data.error) {
            // Erreur lors de la r√©servation
            updateProgressStep('step-1', '‚ùå 1. Erreur cr√©ation ordre Duffel');
            updateProgressStep('step-2', '‚è∏Ô∏è 2. Annul√©');
            updateProgressStep('step-3', '‚è∏Ô∏è 3. Annul√©');
            
            const errorMsg = data.error.message || 'Erreur lors de la r√©servation Duffel.';
            addMessage(`‚ùå ${errorMsg}`, false);
            
            if (data.error.code === 'DUFFEL_BOOKING_FAILED') {
                showDuffelErrorGuidance(data.error);
            } else {
                setTimeout(() => {
                    addBookingRetryButton();
                }, 2000);
            }
        } else {
            // R√©ponse inattendue
            throw new Error('R√©ponse backend inattendue');
        }

    } catch (error) {
        console.error('Erreur r√©servation R√âELLE:', error);
        
        updateProgressStep('step-1', '‚ùå 1. Erreur de connexion');
        updateProgressStep('step-2', '‚è∏Ô∏è 2. Annul√©');
        updateProgressStep('step-3', '‚è∏Ô∏è 3. Annul√©');
        
        addMessage('‚ùå Erreur de connexion lors de la r√©servation. Veuillez r√©essayer.', false);
        
        setTimeout(() => {
            addBookingRetryButton();
        }, 2000);
    }
}

// Fonction pour mettre √† jour les indicateurs de progression
function updateProgressStep(stepId, newText) {
    const stepElement = document.getElementById(stepId);
    if (stepElement) {
        stepElement.textContent = newText;
        if (newText.includes('‚úÖ')) {
            stepElement.style.color = '#10b981';
        } else if (newText.includes('‚ùå')) {
            stepElement.style.color = '#dc2626';
        } else if (newText.includes('‚è≥')) {
            stepElement.style.color = '#f59e0b';
        }
    }
}

// Affichage succ√®s r√©servation r√©elle
function showRealBookingSuccess(data) {
    const passenger = safeGetPassengerData(bookingState.passengers?.[0]);
    const totalPrice = `${data.totalAmount} ${data.totalCurrency}`;
    const confirmationNumber = data.confirmationNumber;
    const bookingReference = data.bookingReference;
    
    const successHtml = `
        <div style="background: linear-gradient(135deg, #059669, #10b981); color: white; border-radius: 16px; padding: 25px; margin: 15px 0;">
            <div style="text-align: center; margin-bottom: 25px;">
                <div style="font-size: 24px; margin-bottom: 10px;">üéâ</div>
                <div style="font-size: 20px; font-weight: bold;">R√©servation CONFIRM√âE !</div>
                <div style="font-size: 14px; opacity: 0.9;">Votre vol est officiellement r√©serv√©</div>
            </div>
            
            <div style="background: white; color: #1f2937; border-radius: 12px; padding: 20px;">
                
                <div style="background: #10b981; color: white; padding: 15px; border-radius: 8px; text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 14px; opacity: 0.9; margin-bottom: 5px;">‚úÖ CONFIRM√â - Num√©ro de confirmation</div>
                    <div style="font-size: 24px; font-weight: bold; letter-spacing: 1px;">${confirmationNumber}</div>
                    ${bookingReference ? `<div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">R√©f√©rence compagnie: ${bookingReference}</div>` : ''}
                </div>
                
                <div style="background: #dcfce7; color: #065f46; padding: 12px; border-radius: 8px; margin-bottom: 15px; text-align: center;">
                    <strong>üìß Email de confirmation envoy√© !</strong><br>
                    V√©rifiez votre bo√Æte mail : ${bookingState.contact.email}
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h4 style="margin: 0 0 8px 0; color: #1f2937;">üë§ Passager</h4>
                    <div style="font-size: 14px; color: #6b7280;">
                        ${passenger.fullName}<br>
                        üìß ${bookingState.contact?.email}<br>
                        üìû ${bookingState.contact?.phone || 'Non renseign√©'}
                    </div>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h4 style="margin: 0 0 8px 0; color: #1f2937;">‚úàÔ∏è Vol confirm√©</h4>
                    <div style="font-size: 14px; color: #6b7280;">
                        ${bookingState.selectedFlight?.airline?.name || 'Compagnie a√©rienne'}<br>
                        Prix total: <strong>${totalPrice}</strong><br>
                        R√©serv√© via: <strong>Duffel API (r√©el)</strong>
                    </div>
                </div>
                
                <div style="background: #fef3c7; color: #92400e; padding: 12px; border-radius: 8px; margin: 15px 0;">
                    <div style="font-size: 13px;">
                        <strong>üìã √âtapes suivantes :</strong><br>
                        ‚Ä¢ V√©rifiez l'email de confirmation re√ßu<br>
                        ‚Ä¢ Enregistrement en ligne 24h avant le d√©part<br>
                        ‚Ä¢ Arrivez 2h avant l'heure de d√©part<br>
                        ‚Ä¢ V√©rifiez la validit√© de vos documents de voyage
                    </div>
                </div>
                
                <div style="display: flex; gap: 10px; justify-content: center; margin-top: 20px;">
                    <button onclick="downloadRealTicket('${confirmationNumber}')" 
                            style="background: #3b82f6; color: white; border: none; padding: 10px 20px; border-radius: 20px; font-weight: 600; cursor: pointer;">
                        üìÑ T√©l√©charger e-ticket
                    </button>
                    <button onclick="resetBooking()" 
                            style="background: #10b981; color: white; border: none; padding: 10px 20px; border-radius: 20px; font-weight: 600; cursor: pointer;">
                        üîç Nouvelle recherche
                    </button>
                </div>
            </div>
        </div>
    `;
    
    addMessage(successHtml, false, true);
}

// Affichage paiement requis
function showPaymentRequired(data) {
    const passenger = safeGetPassengerData(bookingState.passengers?.[0]);
    const totalPrice = `${data.totalAmount} ${data.totalCurrency}`;
    
    const paymentHtml = `
        <div style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; border-radius: 16px; padding: 25px; margin: 15px 0;">
            <div style="text-align: center; margin-bottom: 25px;">
                <div style="font-size: 24px; margin-bottom: 10px;">üí≥</div>
                <div style="font-size: 20px; font-weight: bold;">Paiement Requis</div>
                <div style="font-size: 14px; opacity: 0.9;">Votre vol est r√©serv√©, finalisez le paiement</div>
            </div>
            
            <div style="background: white; color: #1f2937; border-radius: 12px; padding: 20px;">
                
                <div style="background: #fef3c7; color: #92400e; padding: 15px; border-radius: 8px; text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 5px;">‚è≥ R√âSERV√â - Paiement en attente</div>
                    <div style="font-size: 14px;">Confirmation: ${data.confirmationNumber}</div>
                    ${data.bookingReference ? `<div style="font-size: 12px; margin-top: 5px;">R√©f√©rence: ${data.bookingReference}</div>` : ''}
                </div>
                
                <div style="text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 24px; font-weight: bold; color: #f59e0b; margin-bottom: 5px;">${totalPrice}</div>
                    <div style="font-size: 14px; color: #6b7280;">√Ä payer pour finaliser la r√©servation</div>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h4 style="margin: 0 0 8px 0; color: #1f2937;">üë§ D√©tails de r√©servation</h4>
                    <div style="font-size: 14px; color: #6b7280;">
                        Passager: ${passenger.fullName}<br>
                        Email: ${bookingState.contact?.email}<br>
                        Vol: ${bookingState.selectedFlight?.airline?.name || 'N/A'}
                    </div>
                </div>
                
                <div style="background: #dbeafe; color: #1e40af; padding: 12px; border-radius: 8px; margin: 15px 0;">
                    <div style="font-size: 13px;">
                        <strong>üí° Instructions :</strong><br>
                        ‚Ä¢ Un lien de paiement vous a √©t√© envoy√© par email<br>
                        ‚Ä¢ Le paiement doit √™tre effectu√© sous 30 minutes<br>
                        ‚Ä¢ Votre r√©servation sera automatiquement confirm√©e apr√®s paiement
                    </div>
                </div>
                
                <div style="display: flex; gap: 10px; justify-content: center; margin-top: 20px;">
                    ${data.paymentUrl ? 
                        `<button onclick="window.open('${data.paymentUrl}', '_blank')" 
                                 style="background: #059669; color: white; border: none; padding: 10px 20px; border-radius: 20px; font-weight: 600; cursor: pointer;">
                             üí≥ Payer maintenant
                         </button>` : ''}
                    <button onclick="checkPaymentStatus('${data.confirmationNumber}')" 
                            style="background: #3b82f6; color: white; border: none; padding: 10px 20px; border-radius: 20px; font-weight: 600; cursor: pointer;">
                        üîÑ V√©rifier statut
                    </button>
                </div>
            </div>
        </div>
    `;
    
    addMessage(paymentHtml, false, true);
}

// Affichage guidance erreur Duffel
function showDuffelErrorGuidance(error) {
    const guidanceHtml = `
        <div style="background: #fef2f2; border: 1px solid #fca5a5; border-radius: 12px; padding: 20px; margin: 15px 0;">
            <h4 style="color: #dc2626; margin: 0 0 15px 0;">‚ö†Ô∏è Probl√®me avec la r√©servation Duffel</h4>
            
            <div style="color: #7f1d1d; font-size: 14px; margin-bottom: 15px;">
                <strong>Erreur:</strong> ${error.message}
            </div>
            
            <div style="background: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                <div style="font-size: 14px; color: #374151;">
                    <strong>Causes possibles :</strong><br>
                    ‚Ä¢ L'offre de vol a expir√© (les prix changent rapidement)<br>
                    ‚Ä¢ La disponibilit√© du vol a chang√©<br>
                    ‚Ä¢ Probl√®me temporaire avec l'API Duffel<br>
                    ‚Ä¢ Donn√©es passager incorrectes ou incompl√®tes
                </div>
            </div>
            
            <div style="text-align: center;">
                <button onclick="retryFlightSearch()" 
                        style="background: #f59e0b; color: white; border: none; padding: 10px 20px; border-radius: 20px; font-weight: 600; cursor: pointer; margin-right: 10px;">
                    üîç Nouvelle recherche
                </button>
                <button onclick="showPassengerForm()" 
                        style="background: #6b7280; color: white; border: none; padding: 10px 20px; border-radius: 20px; font-weight: 600; cursor: pointer;">
                    ‚úèÔ∏è Modifier informations
                </button>
            </div>
        </div>
    `;
    
    addMessage(guidanceHtml, false, true);
}

// Nouvelles fonctions utilitaires
function downloadRealTicket(confirmationNumber) {
    console.log('T√©l√©chargement e-ticket r√©el:', confirmationNumber);
    addMessage(`üìÑ Fonction de t√©l√©chargement e-ticket √† impl√©menter pour: ${confirmationNumber}`, false);
    addMessage('Le lien de t√©l√©chargement sera disponible dans votre email de confirmation.', false);
}

function checkPaymentStatus(confirmationNumber) {
    console.log('V√©rification statut paiement:', confirmationNumber);
    addMessage('üîÑ V√©rification du statut de paiement...', false);
    
    // Ici on pourrait ajouter un appel API pour v√©rifier le statut
    setTimeout(() => {
        addMessage('Statut de paiement inchang√©. V√©rifiez votre email pour le lien de paiement.', false);
    }, 2000);
}

function retryFlightSearch() {
    console.log('Relance recherche de vol apr√®s erreur');
    resetBooking();
    addMessage('Recommen√ßons votre recherche. D√©crivez √† nouveau votre voyage :', false);
}

// Am√©lioration de la fonction resetBooking pour les r√©servations r√©elles
function resetBooking() {
    console.log('Reset booking state - Version r√©elle');
    
    // Vider le cache local si n√©cessaire
    if (typeof cacheManager !== 'undefined') {
        cacheManager.clear();
    }
    
    bookingState = {
        selectedFlight: null,
        passengers: [],
        contact: {},
        currentStep: 'search',
        sessionId: 'web-' + Date.now(),
        pricing: null,
        searchResults: null,
        searchParams: null,
        realBooking: true // Flag pour les vraies r√©servations
    };
    
    // Sauvegarder l'√©tat
    sessionStorage.setItem('bookingState', JSON.stringify(bookingState));
    
    addMessage('Nouvelle recherche initialis√©e. D√©crivez votre voyage et je trouverai les meilleurs vols !', false);
}
